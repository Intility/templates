stages:
  - build
  - test
  - analyze
  - publish
  - deploy

image: node:14

build:
  stage: build
  artifacts:
    paths:
      - build
      - node_modules
    expire_in: 1 day
  before_script:
    - npm ci
  script:
    - npm run compile

test:
  stage: test
  needs:
    - job: build
      artifacts: true
  artifacts:
    paths:
      - coverage
      - reports
    reports:
      junit:
        - reports/junit_report.xml
  script:
    - npm run test

## Sonarqube configuration Documentation
## https://docs.sonarqube.org/8.9/analysis/analysis-parameters/

sonarqube:
  stage: analyze
  image:
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_PROJECT: $CI_PROJECT_NAME
    SONAR_HOST_URL: https://sonarqube.intility.no
    GIT_DEPTH: "0" # Tells git to fetch all the branches of the project, required by the analysis task
  allow_failure: true
  script:
    - sonar-scanner
      -D sonar.login=$SONAR_TOKEN
      -D sonar.projectKey=$SONAR_PROJECT
      -D sonar.projectName=$SONAR_PROJECT
      -D sonar.qualitygate.wait=true
      -D sonar.scm.provider=git
      -D sonar.projectBaseDir=.
      -D sonar.sources=src
      -D sonar.javascript.lcov.reportPaths=coverage/lcov.info
      -D sonar.tests=__tests__
      -D sonar.links.ci=$CI_PIPELINE_URL
      -D sonar.links.scm=$CI_PROJECT_URL
      -D sonar.exclusions=__tests__
      -D sonar.coverage.exclusions=__tests__
  only:
    - master
    - main
    - tags

npm-audit:
  stage: analyze
  variables:
    AUDIT_FILENAME: reports/npm-audit-report.json
  script:
    - npm audit --json |& tee $AUDIT_FILENAME
  allow_failure: true
  artifacts:
    paths:
      - $AUDIT_FILENAME

.publish_base:
  stage: publish
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json

publish_qa:
  extends: .publish_base
  variables:
    IMAGE_TAG: qa_latest
    IMAGE_VERSION: $CI_PIPELINE_IID
  script:
    - /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/Dockerfile
      --destination $CI_REGISTRY_IMAGE:$IMAGE_TAG
      --destination $CI_REGISTRY_IMAGE:$IMAGE_VERSION
  only:
    - qa

publish_prod:
  extends: .publish_base
  variables:
    IMAGE_TAG: latest
    IMAGE_VERSION: $CI_COMMIT_SHORT_SHA
  script:
    - /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/Dockerfile
      --destination $CI_REGISTRY_IMAGE:$IMAGE_TAG
      --destination $CI_REGISTRY_IMAGE:$IMAGE_VERSION
  when: manual
  only:
    - master
    - main
###
# DEPLOY STAGE
# This is left out on purpose, since this requires a bit of setup
# Head over to the documentation to read more on how to configure this.
#  - Create a project on OpenShift [Guide](https://create.intility.app/react/configuration/deploy)
#  - Create a Deploy Token for your GitLab Repository [Guide](https://create.intility.app/react/configuration/gitlab#add-gitlab-deploy-token)
###

# .deploy_base:
#   stage: deploy
#   image:
#     name: intility/helm-oc:latest
#     entrypoint: [""]
#   variables:
#     HELM_EXPERIMENTAL_OCI: 1
#     IMAGE_TAG: $CI_PIPELINE_IID
#     OPENSHIFT_SERVER: api.openshift.intility.com:6443
#   before_script:
#     - oc login $OPENSHIFT_SERVER --token=$OPENSHIFT_TOKEN
#   script:
#     - helm upgrade
#       --install $CI_ENVIRONMENT_SLUG ./chart
#       --set nameOverride=aa-$CI_PROJECT_NAME
#       --set image.repository=$CI_REGISTRY_IMAGE
#       --set image.tag=$IMAGE_TAG
#       --set registry.url=$CI_REGISTRY
#       --set registry.user=$CI_DEPLOY_USER
#       --set registry.password=$CI_DEPLOY_PASSWORD
#       --set route=$ROUTE
#       --set-string replicaCount=2
#       --set-string secrets.NO_COLOR=true
#       --set secrets.INTILITY_TENANT_ID=$INTILITY_TENANT_ID
#       --set secrets.APP_CLIENT_ID=$APP_CLIENT_ID
#       --set secrets.SWAGGER_APP_CLIENT_ID=$SWAGGER_APP_CLIENT_ID

# deploy_qa:
#   extends: .deploy_base
#   variables:
#     IMAGE_TAG: $CI_PIPELINE_IID
#     ROUTE: qa-$CI_PROJECT_NAME.apps.openshift.intility.com
#   environment:
#     name: qa
#     url: https://qa-$CI_PROJECT_NAME.apps.openshift.intility.com
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "qa"'

# deploy_prod:
#   extends: .deploy_base
#   variables:
#     IMAGE_TAG: $CI_COMMIT_SHORT_SHA
#     ROUTE: $CI_PROJECT_NAME.apps.openshift.intility.com
#   environment:
#     name: prod
#     url: https://$CI_PROJECT_NAME.apps.openshift.intility.com
#   rules:
#     - if: '$CI_COMMIT_BRANCH == "master" || $CI_COMMIT_BRANCH == "main"'
#       when: manual
