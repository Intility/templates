"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[284],{5519:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return p}});var r=n(3117),o=n(102),s=(n(7294),n(3905)),i=["components"],a={title:"Project Structure",sidebar_label:"Project Structure",slug:"/ProjectStructure",sidebar_position:4},c=void 0,l={unversionedId:"projectStructure",id:"projectStructure",title:"Project Structure",description:"Depending on which template you chose, your project structure will look more or less like the following:",source:"@site/express/projectStructure.mdx",sourceDirName:".",slug:"/ProjectStructure",permalink:"/express/ProjectStructure",editUrl:"https://github.com/Intility/templates/tree/main/docusaurus/express/projectStructure.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Project Structure",sidebar_label:"Project Structure",slug:"/ProjectStructure",sidebar_position:4},sidebar:"express",previous:{title:"NPM Scripts",permalink:"/express/NpmScripts"},next:{title:"App Registrations",permalink:"/express/Setup/ApplicationRegistrations"}},u={},p=[],f={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Depending on which template you chose, your project structure will look more or less like the following:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"\u2502   .env.template                       # Template file for .env values\n\u2502   .eslintrc.json                      # ESLint configuration file\n\u2502   .gitignore                          # Files/Directories that Git should ignore\n\u2502   .gitlab-ci.yml                      # GitLab CI Pipeline configuration\n\u2502   docker-compose.yml                  # Docker Compose file\n\u2502   Dockerfile                          # Docker image file\n\u2502   jest.config.ts                      # Jest configuration file\n\u2502   nodemon.json                        # Nodemon configuration file\n\u2502   package-lock.json                   # Installed NPM dependencies\n\u2502   package.json                        # NPM configuration and dependency file\n\u2502   README.md                           # Project README\n\u2502   tsconfig.json                       # TypeScript configuration file\n\u2502\n\u251c\u2500\u2500\u2500.vscode                             # VS Code configuration files\n\u2502       launch.json\n\u2502       settings.json\n\u2502\n\u251c\u2500\u2500\u2500assets                              # Media/assets used across the project\n\u2502       mongodb-docker-compose.yml\n\u2502\n\u251c\u2500\u2500\u2500chart                               # Helm charts for OpenShift deployment\n\u2502   \u2502   Chart.yaml\n\u2502   \u2502   values.yaml\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500templates\n\u2502           config.yaml\n\u2502           deployment.yaml\n\u2502           pull-secret.yaml\n\u2502           route.yaml\n\u2502           secrets.yaml\n\u2502           service.yaml\n\u2502           _helpers.tpl\n\u2502\n\u251c\u2500\u2500\u2500src                                 # Project source code\n\u2502   \u2502   baseRouter.ts                   # Base Express router exposed on `/api/v1` path\n\u2502   \u2502   index.ts                        # Main entrypoint\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500\u2500api                             \n\u2502   \u2502   \u251c\u2500\u2500\u2500health                      # Endpoints for health checking\n\u2502   \u2502   \u2502   \u2502   health.controller.ts\n\u2502   \u2502   \u2502   \u2502   health.router.ts\n\u2502   \u2502   \u2502   \u2502\n\u2502   \u2502   \u2502   \u2514\u2500\u2500\u2500dto                     # Interfaces/typings for Health response DTOs\n\u2502   \u2502   \u2502           health.dto.ts\n\u2502   \u2502   \u2502\n\u2502   \u2502   \u2514\u2500\u2500\u2500users                       # (Optional)    Example CRUD User entity\n\u2502   \u2502       \u2502   user.router.ts          #               Express sub router for User entity\n\u2502   \u2502       \u2502   user.controller.ts      #               Controller class for handling requests\n\u2502   \u2502       \u2502   user.service.ts         #               Service for handling business logic\n\u2502   \u2502       \u2502\n\u2502   \u2502       \u251c\u2500\u2500\u2500dto                     #               DTOs (Data Transfer Object)\n\u2502   \u2502       \u2502       create-user.dto.ts  #                   DTO for creating a new User\n\u2502   \u2502       \u2502       update-user.dto.ts  #                   DTO for updating an existing user\n\u2502   \u2502       \u2502       user.dto.ts         #                   DTO for returning a user\n\u2502   \u2502       \u2502\n\u2502   \u2502       \u2514\u2500\u2500\u2500entities                #               Entities used in databases\n\u2502   \u2502               user.entity.ts      #                   User entity\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500\u2500config                          # Common server configuration\n\u2502   \u2502       app.ts\n\u2502   \u2502       appInsights.ts\n\u2502   \u2502       LoggerService.ts\n\u2502   \u2502       mongoose.ts\n\u2502   \u2502       swagger.ts\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500\u2500interfaces                      # Common interfaces/types used across the projects\n\u2502   \u2502       authorize.ts\n\u2502   \u2502       token.ts\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500\u2500middlewares                     # Express middlewares\n\u2502   \u2502       errorHandler.ts\n\u2502   \u2502       passport.ts\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500\u2500static                          # Static files to be exposed as endpoints\n\u2502   \u2502       oauth2-redirect.html\n\u2502   \u2502       oAuthHandler.js\n\u2502   \u2502       README.md\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500utils                           # Common utilities\n\u2502       \u251c\u2500\u2500\u2500mocks                       #   Mocking values\n\u2502       \u2502       passport.ts\n\u2502       \u2502       \n\u2502       \u2514\u2500\u2500\u2500test                        #   Utilities for testing of the application\n\u2502               expressRouterUtils.ts\n\u2502\n\u2514\u2500\u2500\u2500__tests__                           # Folder for test-files.\n    \u2502   baseRouter.test.ts\n    \u2502\n    \u251c\u2500\u2500\u2500api                             # Folder for testing API resources\n    \u2502   \u251c\u2500\u2500\u2500health                      # Tests for health services\n    \u2502   \u2502       health.controller.test.ts\n    \u2502   \u2502       health.router.test.ts\n    \u2502   \u2502\n    \u2502   \u2514\u2500\u2500\u2500users                       # (Optional)    Tests for example User entity\n    \u2502           users.controller.test.ts\n    \u2502           users.router.test.ts\n    \u2502           users.service.test.ts\n    \u2502\n    \u2514\u2500\u2500\u2500middlewares                     # Folder for testing middlewares\n            errorHandler.test.ts\n            passport.test.ts\n\n")))}d.isMDXComponent=!0},3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),f=l(n),d=o,m=f["".concat(c,".").concat(d)]||f[d]||p[d]||s;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,i=new Array(s);i[0]=f;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:o,i[1]=a;for(var l=2;l<s;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"}}]);